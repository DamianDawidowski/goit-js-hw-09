{"mappings":"oeAAAA,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,QAC9BC,EAASF,SAASG,iBAAiB,SAOzCJ,EAAKK,iBAAiB,UAKtB,SAA2BC,GACzBA,EAAMC,eACN,IAAIC,EAAaL,EAAO,GAAGM,MACvBC,EAAYC,WAAWR,EAAO,GAAGM,OACjCG,EAAiBT,EAAO,GAAGM,MAI/BI,QAAQC,IAAI,eAAeN,gBAAyBE,qBAA6BE,KACjFC,QAAQC,IAAI,eAAeN,gBAAyBE,qBAA6BE,KACjF,IAAK,IAAIG,EAAW,EAAGA,GAAYH,EAAgBG,IACjDC,YAAW,KACTH,QAAQC,IAAI,QACZG,EAAcF,EAAUL,EAAU,GACjCA,GAEHA,EAAYC,WAAWD,GAAaC,WAAWD,GAmBnD,SAASO,EAAcC,EAAUC,GACTC,KAAKC,SAAW,GAEnCR,QAAQC,IAAI,uBAAqBI,QAAiBC,OAGjDN,QAAMC,IAAI,sBAAoBI,QAAiBC,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('form');\nconst inputs = document.querySelectorAll('input');\n\nlet position = 0;\n  // firstDelay.value = 1000;\n// console.log(firstDelay);\n\n\nform.addEventListener('submit', createAllPromises);\n\n\n\n\nfunction createAllPromises(event) {\n  event.preventDefault;\n  let firstDelay = inputs[0].value;\n  let delayStep = parseFloat(inputs[1].value);\n  let promisedAmount = inputs[2].value;\n  // console.log(\n  //   firstDelay\n  // );\n  console.log(`firstDelay: ${firstDelay},delayStep: ${delayStep},promisedAmount: ${promisedAmount}`);\n  console.log(`firstDelay: ${firstDelay},delayStep: ${delayStep},promisedAmount: ${promisedAmount}`);\n  for (let position = 1; position <= promisedAmount; position++) {\n    setTimeout(() => {\n      console.log('done');\n      createPromise(position, delayStep);\n    }, delayStep);\n    \n    delayStep = parseFloat(delayStep) + parseFloat(delayStep);\n  }\n\n\n\n  // function createPromise(position, delay) {\n  //   // setTimeout(() => {\n  //     const shouldResolve = Math.random() > 0.3;\n  //     if (shouldResolve) {\n  //       console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  //       // Fulfill\n  //     } else {\n  //       console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  //       // Reject\n  //     }\n  //   // }, 1000);\n  \n  // };\n\nfunction createPromise(position, delayStep) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n     console.log(`✅ Fulfilled promise ${position} in ${delayStep}ms`);\n    // Fulfill\n  } else {\n    console.log(`❌ Rejected promise ${position} in ${delayStep}ms`);\n    // Reject\n  }\n}\n\n// createPromise(position, delayStep)\n//   .then(({ position, delayStep }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delayStep}ms`);\n//   })\n// //   .catch(({ position, delayStep }) => {\n// //     console.log(`❌ Rejected promise ${position} in ${delayStep}ms`);\n// //   });\n\n\n\n\n\n\n\n\n\n\n\n\n}\n\n\n\n\n\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//      console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//     // Fulfill\n//   } else {\n//      console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//     // Reject\n//   }\n// }\n \n\n\n\n\n\n\n\n\n\n\n\n// XXXXXXXXXXXXXXX\n\n\n// const isSuccess = false;\n\n// const promise = new Promise((resolve, reject) => {\n//   setTimeout(() => {\n//     if (isSuccess) {\n//       resolve('Success! Value passed to resolve function');\n//     } else {\n//       reject('Error! Error passed to reject function');\n//     }\n//   }, 2000);\n// });\n\n// // Will run first\n// console.log('Before promise.then()');\n\n// // Registering promise callbacks\n// promise.then(\n//   // onResolve will run third or not at all\n//   value => {\n//     console.log('onResolve call inside promise.then()');\n//     console.log(value); // \"Success! Value passed to resolve function\"\n//   },\n//   // onReject will run third or not at all\n//   error => {\n//     console.log('onReject call inside promise.then()');\n//     console.log(error); // \"Error! Error passed to reject function\"\n//   }\n// );\n\n// // Will run second\n// console.log('After promise.then()');"],"names":["parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$inputs","querySelectorAll","addEventListener","event","preventDefault","firstDelay","value","delayStep1","parseFloat","promisedAmount","console","log","position1","setTimeout","createPromise","position2","delayStep","Math","random"],"version":3,"file":"03-promises.721e6816.js.map"}